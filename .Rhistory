students <- data.frame(
student_id = c(1,2,3,4),
name = c("Spongebob", "Sandy", "Patrick", "Squidward"),
class_level = c("Freshman", "Sophomore", "Junior", "Senior")
)
courses <- data.frame (
course_id = c(001, 002, 003, 004),
course_name = c("English 101", "English 102", "Math 101", "PHIL 101")
)
grades <- data.frame (
enrollment_id = c(1,2,3,4,5,6),
grade = c("A", "B", "C", "D", "F", "A-")
)
Enrollment <- data.frame(
enrollment_id = c(1,2,3,4,5,6),
student_id = c(1,2,3,4,1,2),
course_id = c(001, 002, 003, 004, 001, 002),
)
students <- data.frame(
student_id = c(1,2,3,4),
name = c("Spongebob", "Sandy", "Patrick", "Squidward"),
class_level = c("Freshman", "Sophomore", "Junior", "Senior")
)
courses <- data.frame (
course_id = c(001, 002, 003, 004),
course_name = c("English 101", "English 102", "Math 101", "PHIL 101")
)
grades <- data.frame (
enrollment_id = c(1,2,3,4,5,6),
grade = c("A", "B", "C", "D", "F", "A-")
)
Enrollment <- data.frame(
enrollment_id = c(1,2,3,4,5,6),
student_id = c(1,2,3,4,1,2),
course_id = c(001, 002, 003, 004, 001, 002)
)
print(students)
print(courses)
print(Enrollment)
students <- data.frame(
student_id = c(1,2,3,4),
name = c("Spongebob", "Sandy", "Patrick", "Squidward"),
class_level = c("Freshman", "Sophomore", "Junior", "Senior")
)
courses <- data.frame (
course_id = c(001, 002, 003, 004),
course_name = c("English 101", "English 102", "Math 101", "PHIL 101")
)
grades <- data.frame (
grade_id = c(1,2,3,4,5,6),
grade = c("A", "A-", "B", "C", "D", "F")
)
Enrollment <- data.frame(
grade_id = c(1,2,3,4,5,6),
student_id = c(1,2,3,4,1,2),
course_id = c(001, 002, 003, 004, 001, 002)
)
print(students)
print(courses)
print(Enrollment)
strings <- c("aaabbb", "xyyx", "abba", "abc", "xyz", "hello", "wow", "123", "abab", "abaca", "abcdcba", "wwwee", "ww", "ana", "awaw", "axabaea", "zywvvwyz")
matches <- grep("(.)\\1\\1", strings, value = TRUE)
matches1 <- grep("(.)(.)\\2\\1", strings, value = TRUE)
matches2 <- grep("(..)\\1", strings, value = TRUE)
#find matches that have alternating repeating characters
matches3 <- grep("(.).\\1.\\1", strings, value = TRUE)
#find matches that have the same beginning character and have that repeat every other character
matches4 <- grep("(.)(.)(.).*\\3\\2\\1", strings, value = TRUE)
#find matches that have at leat 3 chracter that repeats in mirror order.
print(matches)
print(matches1)
print(matches2)
print(matches3)
print(matches4)
write.csv(final_table, "tournamentinfo.csv")
library (tidyverse)
get_data <- read.delim("tournamentinfo.txt", sep = "|", header = TRUE, skip = 1)
library (tidyverse)
getwd()
library (tidyverse)
getwd()
get_data <- read.delim("tournamentinfo.txt", sep = "|", header = TRUE, skip = 1)
# Skip the first row to get the header
get_data <- get_data[!grepl("--------", get_data$Pair), ]
# Remove "-----"
get_data <- get_data[-1,]
# Remove the first line
glimpse(get_data)
odd_rows <- get_data[seq(1, nrow(get_data), by = 2), , drop = FALSE]
#This had the player name, number of points and the rounds
odd_rows <- odd_rows[grepl("\\d", odd_rows$Pair), ]
#remove empty rows
odd_rows <- odd_rows %>%
mutate_at(vars(4:10), ~ str_replace_all(., "[^0-9]", ""))
#remove the letter in the round columns
even_rows <- get_data[seq(2, nrow(get_data), by = 2), , drop = FALSE]
#This has the state and the pre-rating
even_rows <- even_rows %>% mutate(extracted_number =
str_extract(Player.Name, "(?<=R:).*?(?=->)"))
#extract the player's pre-rating
even_rows <- even_rows %>%
mutate(extracted_digits = ifelse
(str_detect(trimws(even_rows$extracted_number), "P"),
str_extract(trimws(even_rows$extracted_number), "^\\d+(?=P)"),
trimws(even_rows$extracted_number)))
#remove the "P" in some of the pre-rating
even_rows <- even_rows %>% mutate(Ranking = as.numeric(even_rows$extracted_digits))
#make the ranking to be numeric
df_restructured <- data.frame(Odd_Values = odd_rows,
Even_Values = even_rows$Pair, even_rows$Ranking)
#combine the two tables (even and odd)
df_col_rename <- df_restructured %>% rename(
Pair = Odd_Values.Pair,
Player_name = Odd_Values.Player.Name,
Total_Num_of_Points = Odd_Values.Total,
Round_1 = Odd_Values.Round,
Round_2 = Odd_Values.Round.1,
Round_3 = Odd_Values.Round.2,
Round_4 = Odd_Values.Round.3,
Round_5 = Odd_Values.Round.4,
Round_6 = Odd_Values.Round.5,
Round_7 = Odd_Values.Round.6,
Player_State = Even_Values,
Player_PreRating = even_rows.Ranking
# renamed all the columns in preparation for the final result
)
Long_format <- df_col_rename%>%
pivot_longer(cols = contains("Round"), names_to = "Round", values_to = "Opponent_ID") %>%
drop_na(Opponent_ID)
# Transform to long format where all the round columns (1,2,3..) is now just one column
#called Round and the value in those columns are now in new column called Opponent ID
Long_format <- Long_format %>%
mutate(Opponent_ID = as.numeric(Opponent_ID))
df_col_rename <- df_col_rename %>%
mutate(Pair = as.numeric(Pair))
#prepare the data type to be the same data type for joining
df_with_opponent_rank <- Long_format %>%
left_join(df_col_rename %>% select(Pair, Player_PreRating), by = c("Opponent_ID" = "Pair"))
#joined Long_format and df_col_rename to get the opponent rank
final_table <- df_with_opponent_rank %>%
group_by(Pair,Player_name, Player_State, Total_Num_of_Points, Player_PreRating.x) %>%
summarise(Avg_Pre_Chess_Rating_of_Opponents = round(mean(Player_PreRating.y, na.rm = TRUE)))
write.csv(final_table, "tournamentinfo.csv")
final_table
write.csv(final_table, "tournamentinfo.csv")
print(final_table)
write.csv(final_table, "tournamentinfo.csv")
view(final_table)
write.csv(final_table, "tournamentinfo.csv")
print(xtable(final_table), type = "latex", comment = FALSE)
write.csv(final_table, "tournamentinfo.csv")
knitr::kable(final_table)
write.csv(final_table, "tournamentinfo.csv")
knitr::kable(final_table) %>%
kableExtra::kable_styling(font_size = 8)
write.csv(final_table, "tournamentinfo.csv")
knitr::kable(final_table) %>%
kableExtra::kable_styling(font_size = 10)
write.csv(final_table, "tournamentinfo.csv")
knitr::kable(final_table) %>%
kableExtra::kable_styling(font_size = 8)
write.csv(final_table, "tournamentinfo.csv")
knitr::kable(final_table) %>%
kableExtra::kable_styling(font_size = 8)
library (tidyverse)
getwd()
get_data <- read.delim("tournamentinfo.txt", sep = "|", header = TRUE, skip = 1)
# Skip the first row to get the header
get_data <- get_data[!grepl("--------", get_data$Pair), ]
# Remove "-----"
get_data <- get_data[-1,]
# Remove the first line
glimpse(get_data)
odd_rows <- get_data[seq(1, nrow(get_data), by = 2), , drop = FALSE]
#This had the player name, number of points and the rounds
odd_rows <- odd_rows[grepl("\\d", odd_rows$Pair), ]
#remove empty rows
odd_rows <- odd_rows %>%
mutate_at(vars(4:10), ~ str_replace_all(., "[^0-9]", ""))
#remove the letter in the round columns
even_rows <- get_data[seq(2, nrow(get_data), by = 2), , drop = FALSE]
#This has the state and the pre-rating
even_rows <- even_rows %>% mutate(extracted_number =
str_extract(Player.Name, "(?<=R:).*?(?=->)"))
#extract the player's pre-rating
even_rows <- even_rows %>%
mutate(extracted_digits = ifelse
(str_detect(trimws(even_rows$extracted_number), "P"),
str_extract(trimws(even_rows$extracted_number), "^\\d+(?=P)"),
trimws(even_rows$extracted_number)))
#remove the "P" in some of the pre-rating
even_rows <- even_rows %>% mutate(Ranking = as.numeric(even_rows$extracted_digits))
#make the ranking to be numeric
df_restructured <- data.frame(Odd_Values = odd_rows,
Even_Values = even_rows$Pair, even_rows$Ranking)
#combine the two tables (even and odd)
df_col_rename <- df_restructured %>% rename(
Pair = Odd_Values.Pair,
Player_name = Odd_Values.Player.Name,
Total_Num_of_Points = Odd_Values.Total,
Round_1 = Odd_Values.Round,
Round_2 = Odd_Values.Round.1,
Round_3 = Odd_Values.Round.2,
Round_4 = Odd_Values.Round.3,
Round_5 = Odd_Values.Round.4,
Round_6 = Odd_Values.Round.5,
Round_7 = Odd_Values.Round.6,
Player_State = Even_Values,
Player_PreRating = even_rows.Ranking
# renamed all the columns in preparation for the final result
)
Long_format <- df_col_rename%>%
pivot_longer(cols = contains("Round"), names_to = "Round", values_to = "Opponent_ID") %>%
drop_na(Opponent_ID)
# Transform to long format where all the round columns (1,2,3..) is now just one column
#called Round and the value in those columns are now in new column called Opponent ID
Long_format <- Long_format %>%
mutate(Opponent_ID = as.numeric(Opponent_ID))
df_col_rename <- df_col_rename %>%
mutate(Pair = as.numeric(Pair))
#prepare the data type to be the same data type for joining
df_with_opponent_rank <- Long_format %>%
left_join(df_col_rename %>% select(Pair, Player_PreRating), by = c("Opponent_ID" = "Pair"))
#joined Long_format and df_col_rename to get the opponent rank
final_table <- df_with_opponent_rank %>%
group_by(Pair,Player_name, Player_State, Total_Num_of_Points, Player_PreRating.x) %>%
summarise(Avg_Pre_Chess_Rating_of_Opponents = round(mean(Player_PreRating.y, na.rm = TRUE)))
write.csv(final_table, "tournamentinfo.csv")
knitr::kable(final_table) %>%
kableExtra::kable_styling(font_size = 6)
