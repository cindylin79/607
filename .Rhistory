return_3day = (end_price - start_price) / start_price
)
sentiment_analysis <- price_movement_3day %>%
left_join(combined, by = "symbol")
library(ggplot2)
ggplot(sentiment_analysis, aes(x = avg_sentiment, y = return_3day, label = symbol)) +
geom_point(size = 3, color = "steelblue") +
geom_text(nudge_y = 0.005) +
labs(title = "Sentiment vs 3-Day Return After Earnings",
x = "Sentiment Score (Pre-Earnings)",
y = "3-Day Stock Return")
cor_test <- cor.test(sentiment_analysis$avg_sentiment, sentiment_analysis$return_3day)
cor_test
options(repos = c(CRAN = "https://cloud.r-project.org"))
install.packages(c("dplyr", "RMySQL", "purr", "tidyquant"))
library(tidyRSS)
library(dplyr)
library(DBI)
library(RMySQL)
library(stringr)
library(purrr)
library(tidyquant)
stocks <- c("UBER", "DASH", "Z", "DIS", "CVNA")
get_yahoo_news_filtered <- function(symbol) {
rss_url <- paste0("https://feeds.finance.yahoo.com/rss/2.0/headline?s=", symbol, "&region=US&lang=en-US")
#This constructs the RSS feed from Yahoo Finance to get the UBER, DASH, Z, DIS, and CVNA news.
feed <- tidyfeed(rss_url)
#Using the tidyfeed I am feeding it to a dataframe.
feed <- feed %>%
filter(
as.Date(item_pub_date) >= Sys.Date(),
str_detect(tolower(item_title), fixed(tolower(symbol))) |
str_detect(tolower(item_description), fixed(tolower(symbol)))
) %>%
mutate(symbol = symbol)
return(feed)
}
all_news_filtered <- lapply(stocks, get_yahoo_news_filtered) %>%
bind_rows()
install.packages(c("dplyr", "RMySQL", "purr", "tidyquant"))
#lapply runs the function in a vector
#bind_rows put the result into dataframe as one
head(all_news_filtered %>% select(symbol, item_title, item_pub_date, symbol))
news_data <- all_news_filtered %>%
select(symbol, item_title, item_description, item_pub_date, item_link, item_description) %>%
mutate(item_title = substr(item_title, 1, 255))
con <- dbConnect(
RMySQL::MySQL(),
user = "root",
dbname = "mydatabase",
host = "127.0.0.1"
)
dbWriteTable(con, name = "stock_news", value = news_data, append = TRUE, row.names = FALSE)
dbListTables(con)
news_df <- dbGetQuery(con, "SELECT * FROM stock_news")
head(news_df)
library(dplyr)
library(syuzhet)
news_df <- news_data %>%
mutate(full_text = paste(item_title, item_description, sep = ". "))
news_df <- news_data %>%
rowwise() %>%
mutate(sentiment = mean(syuzhet::get_sentiment(syuzhet::get_sentences(full_text)), na.rm = TRUE)) %>%
ungroup()
View(news_data)
View(news_data)
View(news_df)
View(news_data)
library(dplyr)
library(syuzhet)
news_df <- news_data %>%
rowwise() %>%
mutate(sentiment = mean(syuzhet::get_sentiment(syuzhet::get_sentences(full_text)), na.rm = TRUE)) %>%
ungroup()
options(repos = c(CRAN = "https://cloud.r-project.org"))
install.packages(c("dplyr", "RMySQL", "purr", "tidyquant"))
library(tidyRSS)
library(dplyr)
library(DBI)
library(RMySQL)
library(stringr)
library(purrr)
library(tidyquant)
install.packages(c("dplyr", "RMySQL", "purr", "tidyquant"))
library(dplyr)
library(syuzhet)
news_df <- news_data %>%
rowwise() %>%
mutate(sentiment = mean(syuzhet::get_sentiment(syuzhet::get_sentences(full_text)), na.rm = TRUE)) %>%
ungroup()
library(dplyr)
library(syuzhet)
news_df <- news_data %>%
mutate(full_text = paste(item_title, item_description, sep = ". "))
news_df <- news_data %>%
rowwise() %>%
mutate(sentiment = mean(syuzhet::get_sentiment(syuzhet::get_sentences(full_text)), na.rm = TRUE)) %>%
ungroup()
dbListTables(con)
options(repos = c(CRAN = "https://cloud.r-project.org"))
install.packages(c("dplyr", "RMySQL", "purr", "tidyquant"))
library(tidyRSS)
library(dplyr)
library(DBI)
library(RMySQL)
library(stringr)
library(purrr)
library(tidyquant)
stocks <- c("UBER", "DASH", "Z", "DIS", "CVNA")
get_yahoo_news_filtered <- function(symbol) {
rss_url <- paste0("https://feeds.finance.yahoo.com/rss/2.0/headline?s=", symbol, "&region=US&lang=en-US")
#This constructs the RSS feed from Yahoo Finance to get the UBER, DASH, Z, DIS, and CVNA news.
feed <- tidyfeed(rss_url)
#Using the tidyfeed I am feeding it to a dataframe.
feed <- feed %>%
filter(
as.Date(item_pub_date) >= Sys.Date(),
str_detect(tolower(item_title), fixed(tolower(symbol))) |
str_detect(tolower(item_description), fixed(tolower(symbol)))
) %>%
mutate(symbol = symbol)
return(feed)
}
all_news_filtered <- lapply(stocks, get_yahoo_news_filtered) %>%
bind_rows()
#lapply runs the function in a vector
#bind_rows put the result into dataframe as one
head(all_news_filtered %>% select(symbol, item_title, item_pub_date, symbol))
news_data <- all_news_filtered %>%
select(symbol, item_title, item_description, item_pub_date, item_link, item_description) %>%
mutate(item_title = substr(item_title, 1, 255))
install.packages(c("dplyr", "RMySQL", "purr", "tidyquant"))
con <- dbConnect(
RMySQL::MySQL(),
user = "root",
dbname = "mydatabase",
host = "127.0.0.1"
)
dbWriteTable(con, name = "stock_news", value = news_data, append = TRUE, row.names = FALSE)
dbListTables(con)
news_df <- dbGetQuery(con, "SELECT * FROM stock_news")
head(news_df)
library(dplyr)
library(syuzhet)
news_df <- news_data %>%
mutate(full_text = paste(item_title, item_description, sep = ". "))
news_df <- news_data %>%
rowwise() %>%
mutate(sentiment = mean(syuzhet::get_sentiment(syuzhet::get_sentences(full_text)), na.rm = TRUE)) %>%
ungroup()
library(dplyr)
library(syuzhet)
news_df <- news_data %>%
mutate(full_text = paste(item_title, item_description, sep = ". "))
news_df <- news_df %>%
rowwise() %>%
mutate(sentiment = mean(syuzhet::get_sentiment(syuzhet::get_sentences(full_text)), na.rm = TRUE)) %>%
ungroup()
sentiment_by_stock <- news_df %>%
group_by(symbol) %>%
summarise(avg_sentiment = mean(sentiment, na.rm = TRUE))
print(sentiment_by_stock)
combined <- merge(earnings, sentiment_by_stock, by = "symbol")
combined$earnings_result <- with(combined, ifelse(
EPS > EPS_Forecast, "beat",
ifelse(EPS < EPS_Forecast, "miss", "meet")
))
head(combined)
library(ggplot2)
ggplot(combined, aes(x = avg_sentiment, y = Percent_Surprise, label = symbol)) +
geom_point(size = 4, color = "blue") +
geom_text(nudge_x = 0.01, nudge_y = 2) +
labs(
title = "Sentiment Score vs. Earnings Percent Surprise",
x = "Sentiment Score",
y = "Percent Surprise (%)"
) +
theme_minimal()
date_map <- data.frame(
symbol = c("UBER", "DASH", "Z", "DIS", "CVNA"),
earnings_date = as.Date(c("2025-05-07", "2025-05-06", "2025-05-07", "2025-05-07", "2025-05-07"))
)
combined <- left_join(combined, date_map, by = "symbol")
get_price_window <- function(symbol, date) {
tq_get(symbol, from = date - 2, to = date + 2) %>%
mutate(symbol = symbol, earnings_date = date)
}
price_data <- map2_df(combined$symbol, combined$earnings_date, get_price_window)
options(repos = c(CRAN = "https://cloud.r-project.org"))
install.packages(c("dplyr", "RMySQL", "purr", "tidyquant"))
library(tidyRSS)
library(dplyr)
library(DBI)
library(RMySQL)
library(stringr)
library(purrr)
library(tidyquant)
install.packages(c("dplyr", "RMySQL", "purr", "tidyquant"))
date_map <- data.frame(
symbol = c("UBER", "DASH", "Z", "DIS", "CVNA"),
earnings_date = as.Date(c("2025-05-07", "2025-05-06", "2025-05-07", "2025-05-07", "2025-05-07"))
)
combined <- left_join(combined, date_map, by = "symbol")
get_price_window <- function(symbol, date) {
tq_get(symbol, from = date - 2, to = date + 2) %>%
mutate(symbol = symbol, earnings_date = date)
}
price_data <- map2_df(combined$symbol, combined$earnings_date, get_price_window)
earnings_dates <- data.frame(
symbol = c("UBER", "DASH", "Z", "DIS", "CVNA"),
earnings_date = as.Date(c("2025-05-07", "2025-05-06", "2025-05-07", "2025-05-07", "2025-05-07"))
)
combined <- left_join(combined, earnings_dates, by = "symbol")
get_price_window <- function(symbol, date) {
tq_get(symbol, from = date - 2, to = date + 2) %>%
mutate(symbol = symbol, earnings_date = date)
}
price_data <- map2_df(combined$symbol, combined$earnings_date, get_price_window)
cumulative_returns <- price_data %>%
filter(date >= earnings_date - 1 & date <= earnings_date + 1) %>%
group_by(symbol) %>%
arrange(date)
final_df <- cumulative_returns %>%
left_join(combined, by = "symbol")
print(final_df)
library(ggplot2)
price_movement_3day <- final_df%>%
group_by(symbol) %>%
summarize(
start_price = first(adjusted),
end_price = last(adjusted),
return_3day = (end_price - start_price) / start_price
)
sentiment_analysis <- price_movement_3day %>%
left_join(combined, by = "symbol")
library(ggplot2)
ggplot(sentiment_analysis, aes(x = avg_sentiment, y = return_3day, label = symbol)) +
geom_point(size = 3, color = "steelblue") +
geom_text(nudge_y = 0.005) +
labs(title = "Sentiment vs 3-Day Return After Earnings",
x = "Sentiment Score (Pre-Earnings)",
y = "3-Day Stock Return")
library(dplyr)
library(DBI)
library(RMySQL)
library(stringr)
library(tidyRSS)
library(purrr)
library(tidyquant)
library(syuzhet)
library(ggplot2)
library(ggplot2)
ggplot(combined, aes(x = avg_sentiment, y = Percent_Surprise, label = symbol)) +
geom_point(size = 4, color = "blue") +
geom_text(nudge_x = 0.01, nudge_y = 2) +
labs(
title = "Sentiment Score vs. Earnings Percent Surprise",
x = "Sentiment Score",
y = "Percent Surprise (%)"
) +
theme_minimal()
library(ggplot2)
ggplot(combined, aes(x = avg_sentiment, y = Percent_Surprise, label = symbol)) +
geom_point(size = 4, color = "blue") +
geom_text(nudge_x = 0.01, nudge_y = 2) +
labs(
title = "Sentiment Score vs. Earnings Percent Surprise",
x = "Sentiment Score",
y = "Percent Surprise (%)"
) +
theme_minimal()
news_df <- news_data %>%
mutate(full_text = paste(item_title, item_description, sep = ". "))
news_df <- news_df %>%
rowwise() %>%
mutate(sentiment = mean(syuzhet::get_sentiment(syuzhet::get_sentences(full_text)), na.rm = TRUE)) %>%
ungroup()
sentiment_by_stock <- news_df %>%
group_by(symbol) %>%
summarise(avg_sentiment = mean(sentiment, na.rm = TRUE))
print(sentiment_by_stock)
stocks <- c("UBER", "DASH", "Z", "DIS", "CVNA")
get_yahoo_news_filtered <- function(symbol) {
rss_url <- paste0("https://feeds.finance.yahoo.com/rss/2.0/headline?s=", symbol, "&region=US&lang=en-US")
#This constructs the RSS feed from Yahoo Finance to get the UBER, DASH, Z, DIS, and CVNA news.
feed <- tidyfeed(rss_url)
#Using the tidyfeed I am feeding it to a dataframe.
feed <- feed %>%
filter(
as.Date(item_pub_date) >= as.date("2025-05-06"),
str_detect(tolower(item_title), fixed(tolower(symbol))) |
str_detect(tolower(item_description), fixed(tolower(symbol)))
) %>%
mutate(symbol = symbol)
return(feed)
}
all_news_filtered <- lapply(stocks, get_yahoo_news_filtered) %>%
bind_rows()
stocks <- c("UBER", "DASH", "Z", "DIS", "CVNA")
get_yahoo_news_filtered <- function(symbol) {
rss_url <- paste0("https://feeds.finance.yahoo.com/rss/2.0/headline?s=", symbol, "&region=US&lang=en-US")
feed <- tidyfeed(rss_url)
feed <- feed %>%
filter(
as.Date(item_pub_date) >= as.Date("2025-05-06"),
str_detect(tolower(item_title), fixed(tolower(symbol))) |
str_detect(tolower(item_description), fixed(tolower(symbol)))
) %>%
mutate(symbol = symbol)
return(feed)
}
all_news_filtered <- lapply(stocks, get_yahoo_news_filtered) %>%
bind_rows()
#lapply runs the function in a vector
#bind_rows put the result into dataframe as one
head(all_news_filtered %>% select(symbol, item_title, item_pub_date, symbol))
news_df <- news_data %>%
mutate(full_text = paste(item_title, item_description, sep = ". "))
news_df <- news_df %>%
rowwise() %>%
mutate(sentiment = mean(syuzhet::get_sentiment(syuzhet::get_sentences(full_text)), na.rm = TRUE)) %>%
ungroup()
sentiment_by_stock <- news_df %>%
group_by(symbol) %>%
summarise(avg_sentiment = mean(sentiment, na.rm = TRUE))
print(sentiment_by_stock)
combined <- merge(earnings, sentiment_by_stock, by = "symbol")
combined$earnings_result <- with(combined, ifelse(
EPS > EPS_Forecast, "beat",
ifelse(EPS < EPS_Forecast, "miss", "meet")
))
head(combined)
library(ggplot2)
ggplot(combined, aes(x = avg_sentiment, y = Percent_Surprise, label = symbol)) +
geom_point(size = 4, color = "blue") +
geom_text(nudge_x = 0.01, nudge_y = 2) +
labs(
title = "Sentiment Score vs. Earnings Percent Surprise",
x = "Sentiment Score",
y = "Percent Surprise (%)"
) +
theme_minimal()
news_df <- news_data %>%
mutate(full_text = paste(item_title, item_description, sep = ". "))
news_df <- news_df %>%
rowwise() %>%
mutate(sentiment = mean(syuzhet::get_sentiment(syuzhet::get_sentences(full_text)), na.rm = TRUE)) %>%
ungroup()
sentiment_by_stock <- news_df %>%
group_by(symbol) %>%
summarise(avg_sentiment = mean(sentiment, na.rm = TRUE))
print(sentiment_by_stock)
write.csv(sentiment_by_stock, "news_data.csv", row.names = FALSE)
earnings <- read.csv("earnings.csv")
sentiment_by_stock <- read.csv("news_data.csv")
View(sentiment_analysis)
View(sentiment_by_stock)
View(sentiment_analysis)
View(sentiment_by_stock)
combined <- merge(earnings, sentiment_by_stock, by = "symbol")
combined$earnings_result <- with(combined, ifelse(
EPS > EPS_Forecast, "beat",
ifelse(EPS < EPS_Forecast, "miss", "meet")
))
head(combined)
library(ggplot2)
ggplot(combined, aes(x = avg_sentiment, y = Percent_Surprise, label = symbol)) +
geom_point(size = 4, color = "blue") +
geom_text(nudge_x = 0.01, nudge_y = 2) +
labs(
title = "Sentiment Score vs. Earnings Percent Surprise",
x = "Sentiment Score",
y = "Percent Surprise (%)"
) +
theme_minimal()
stocks <- c("UBER", "DASH", "Z", "DIS", "CVNA")
get_yahoo_news_filtered <- function(symbol) {
rss_url <- paste0("https://feeds.finance.yahoo.com/rss/2.0/headline?s=", symbol, "&region=US&lang=en-US")
feed <- tidyfeed(rss_url)
feed <- feed %>%
filter(
str_detect(tolower(item_title), fixed(tolower(symbol))) |
str_detect(tolower(item_description), fixed(tolower(symbol)))
) %>%
mutate(symbol = symbol)
return(feed)
}
all_news_filtered <- lapply(stocks, get_yahoo_news_filtered) %>%
bind_rows()
#lapply runs the function in a vector
#bind_rows put the result into dataframe as one
head(all_news_filtered %>% select(symbol, item_title, item_pub_date, symbol))
cor_test <- cor.test(sentiment_analysis$avg_sentiment, sentiment_analysis$return_3day)
cor_test
# In console
table(news_df$symbol)
# In knit (print or output this table)
news_df %>% count(symbol)
View(news_data)
View(news_df)
library(ggplot2)
ggplot(combined, aes(x = avg_sentiment, y = Percent_Surprise, label = symbol)) +
geom_point(size = 4, color = "blue") +
geom_text(nudge_x = 0.01, nudge_y = 2) +
labs(
title = "Sentiment Score vs. Earnings Percent Surprise",
x = "Sentiment Score",
y = "Percent Surprise (%)"
) +
theme_minimal()
combined <- merge(earnings, sentiment_by_stocks, by = "symbol")
earnings <- read.csv("earnings.csv")
sentiment_by_stocks <- read.csv("news_data.csv")
combined <- merge(earnings, sentiment_by_stocks, by = "symbol")
combined$earnings_result <- with(combined, ifelse(
EPS > EPS_Forecast, "beat",
ifelse(EPS < EPS_Forecast, "miss", "meet")
))
head(combined)
library(ggplot2)
ggplot(combined, aes(x = avg_sentiment, y = Percent_Surprise, label = symbol)) +
geom_point(size = 4, color = "blue") +
geom_text(nudge_x = 0.01, nudge_y = 2) +
labs(
title = "Sentiment Score vs. Earnings Percent Surprise",
x = "Sentiment Score",
y = "Percent Surprise (%)"
) +
theme_minimal()
earnings <- read.csv("earnings.csv")
sentiment_by_stocks <- read.csv("news_data.csv")
combined <- merge(earnings, sentiment_by_stocks, by = "symbol")
combined$earnings_result <- with(combined, ifelse(
EPS > EPS_Forecast, "beat",
ifelse(EPS < EPS_Forecast, "miss", "meet")
))
head(combined)
View(news_data)
news_df <- news_data %>%
mutate(full_text = paste(item_title, item_description, sep = ". "))
news_df <- news_df %>%
rowwise() %>%
mutate(sentiment = mean(syuzhet::get_sentiment(syuzhet::get_sentences(full_text)), na.rm = TRUE)) %>%
ungroup()
sentiment_by_stock <- news_df %>%
group_by(symbol) %>%
summarise(avg_sentiment = mean(sentiment, na.rm = TRUE))
print(sentiment_by_stock)
write.csv(sentiment_by_stock, "news_data.csv", row.names = FALSE)
earnings <- read.csv("earnings.csv")
sentiment_by_stocks <- read.csv("news_data.csv")
combined <- merge(earnings, sentiment_by_stocks, by = "symbol")
combined$earnings_result <- with(combined, ifelse(
EPS > EPS_Forecast, "beat",
ifelse(EPS < EPS_Forecast, "miss", "meet")
))
head(combined)
library(ggplot2)
ggplot(combined, aes(x = avg_sentiment, y = Percent_Surprise, label = symbol)) +
geom_point(size = 4, color = "blue") +
geom_text(nudge_x = 0.01, nudge_y = 2) +
labs(
title = "Sentiment Score vs. Earnings Percent Surprise",
x = "Sentiment Score",
y = "Percent Surprise (%)"
) +
theme_minimal()
news_df <- news_data %>%
mutate(full_text = paste(item_title, item_description, sep = ". "))
library(dplyr)
library(DBI)
library(RMySQL)
library(stringr)
library(tidyRSS)
library(purrr)
library(tidyquant)
library(syuzhet)
library(ggplot2)
news_df <- news_data %>%
mutate(full_text = paste(item_title, item_description, sep = ". "))
news_df <- news_df %>%
rowwise() %>%
mutate(sentiment = mean(syuzhet::get_sentiment(syuzhet::get_sentences(full_text)), na.rm = TRUE)) %>%
ungroup()
sentiment_by_stock <- news_df %>%
group_by(symbol) %>%
summarise(avg_sentiment = mean(sentiment, na.rm = TRUE))
print(sentiment_by_stock)
write.csv(sentiment_by_stock, "news_data.csv", row.names = FALSE)
library(dplyr)
library(DBI)
library(RMySQL)
library(stringr)
library(tidyRSS)
library(purrr)
library(tidyquant)
library(syuzhet)
library(ggplot2)
earnings <- read.csv("earnings.csv")
sentiment_by_stocks <- read.csv("news_data.csv")
print(earnings)
print(sentiment_by_stocks)
news_df <- news_data %>%
mutate(full_text = paste(item_title, item_description, sep = ". "))
news_df <- news_df %>%
rowwise() %>%
mutate(sentiment = mean(syuzhet::get_sentiment(syuzhet::get_sentences(full_text)), na.rm = TRUE)) %>%
ungroup()
sentiment_by_stock <- news_df %>%
group_by(symbol) %>%
summarise(avg_sentiment = mean(sentiment, na.rm = TRUE))
print(sentiment_by_stock)
