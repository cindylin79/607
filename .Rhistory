str_extract(trimws(even_rows$extracted_number), "^\\d+(?=P)"),
trimws(even_rows$extracted_number)))
#remove the "P" in some of the pre-rating
even_rows <- even_rows %>% mutate(Ranking = as.numeric(even_rows$extracted_digits))
#make the ranking to be numeric
df_restructured <- data.frame(Odd_Values = odd_rows,
Even_Values = even_rows$Pair, even_rows$Ranking)
#combine the two tables (even and odd)
df_col_rename <- df_restructured %>% rename(
Pair = Odd_Values.Pair,
Player_name = Odd_Values.Player.Name,
Total_Num_of_Points = Odd_Values.Total,
Round_1 = Odd_Values.Round,
Round_2 = Odd_Values.Round.1,
Round_3 = Odd_Values.Round.2,
Round_4 = Odd_Values.Round.3,
Round_5 = Odd_Values.Round.4,
Round_6 = Odd_Values.Round.5,
Round_7 = Odd_Values.Round.6,
Player_State = Even_Values,
Player_PreRating = even_rows.Ranking
# renamed all the columns in preparation for the final result
)
Long_format <- df_col_rename%>%
pivot_longer(cols = contains("Round"), names_to = "Round", values_to = "Opponent_ID") %>%
drop_na(Opponent_ID)
# Transform to long format where all the round columns (1,2,3..) is now just one column
#called Round and the value in those columns are now in new column called Opponent ID
Long_format <- Long_format %>%
mutate(Opponent_ID = as.numeric(Opponent_ID))
df_col_rename <- df_col_rename %>%
mutate(Pair = as.numeric(Pair))
#prepare the data type to be the same data type for joining
df_with_opponent_rank <- Long_format %>%
left_join(df_col_rename %>% select(Pair, Player_PreRating), by = c("Opponent_ID" = "Pair"))
#joined Long_format and df_col_rename to get the opponent rank
final_table <- df_with_opponent_rank %>%
group_by(Pair,Player_name, Player_State, Total_Num_of_Points, Player_PreRating.x) %>%
summarise(Avg_Pre_Chess_Rating_of_Opponents = round(mean(Player_PreRating.y, na.rm = TRUE)))
write.csv(final_table, "tournamentinfo.csv")
final_table
write.csv(final_table, "tournamentinfo.csv")
print(final_table)
write.csv(final_table, "tournamentinfo.csv")
view(final_table)
write.csv(final_table, "tournamentinfo.csv")
print(xtable(final_table), type = "latex", comment = FALSE)
write.csv(final_table, "tournamentinfo.csv")
knitr::kable(final_table)
write.csv(final_table, "tournamentinfo.csv")
knitr::kable(final_table) %>%
kableExtra::kable_styling(font_size = 8)
write.csv(final_table, "tournamentinfo.csv")
knitr::kable(final_table) %>%
kableExtra::kable_styling(font_size = 10)
write.csv(final_table, "tournamentinfo.csv")
knitr::kable(final_table) %>%
kableExtra::kable_styling(font_size = 8)
write.csv(final_table, "tournamentinfo.csv")
knitr::kable(final_table) %>%
kableExtra::kable_styling(font_size = 8)
library (tidyverse)
getwd()
get_data <- read.delim("tournamentinfo.txt", sep = "|", header = TRUE, skip = 1)
# Skip the first row to get the header
get_data <- get_data[!grepl("--------", get_data$Pair), ]
# Remove "-----"
get_data <- get_data[-1,]
# Remove the first line
glimpse(get_data)
odd_rows <- get_data[seq(1, nrow(get_data), by = 2), , drop = FALSE]
#This had the player name, number of points and the rounds
odd_rows <- odd_rows[grepl("\\d", odd_rows$Pair), ]
#remove empty rows
odd_rows <- odd_rows %>%
mutate_at(vars(4:10), ~ str_replace_all(., "[^0-9]", ""))
#remove the letter in the round columns
even_rows <- get_data[seq(2, nrow(get_data), by = 2), , drop = FALSE]
#This has the state and the pre-rating
even_rows <- even_rows %>% mutate(extracted_number =
str_extract(Player.Name, "(?<=R:).*?(?=->)"))
#extract the player's pre-rating
even_rows <- even_rows %>%
mutate(extracted_digits = ifelse
(str_detect(trimws(even_rows$extracted_number), "P"),
str_extract(trimws(even_rows$extracted_number), "^\\d+(?=P)"),
trimws(even_rows$extracted_number)))
#remove the "P" in some of the pre-rating
even_rows <- even_rows %>% mutate(Ranking = as.numeric(even_rows$extracted_digits))
#make the ranking to be numeric
df_restructured <- data.frame(Odd_Values = odd_rows,
Even_Values = even_rows$Pair, even_rows$Ranking)
#combine the two tables (even and odd)
df_col_rename <- df_restructured %>% rename(
Pair = Odd_Values.Pair,
Player_name = Odd_Values.Player.Name,
Total_Num_of_Points = Odd_Values.Total,
Round_1 = Odd_Values.Round,
Round_2 = Odd_Values.Round.1,
Round_3 = Odd_Values.Round.2,
Round_4 = Odd_Values.Round.3,
Round_5 = Odd_Values.Round.4,
Round_6 = Odd_Values.Round.5,
Round_7 = Odd_Values.Round.6,
Player_State = Even_Values,
Player_PreRating = even_rows.Ranking
# renamed all the columns in preparation for the final result
)
Long_format <- df_col_rename%>%
pivot_longer(cols = contains("Round"), names_to = "Round", values_to = "Opponent_ID") %>%
drop_na(Opponent_ID)
# Transform to long format where all the round columns (1,2,3..) is now just one column
#called Round and the value in those columns are now in new column called Opponent ID
Long_format <- Long_format %>%
mutate(Opponent_ID = as.numeric(Opponent_ID))
df_col_rename <- df_col_rename %>%
mutate(Pair = as.numeric(Pair))
#prepare the data type to be the same data type for joining
df_with_opponent_rank <- Long_format %>%
left_join(df_col_rename %>% select(Pair, Player_PreRating), by = c("Opponent_ID" = "Pair"))
#joined Long_format and df_col_rename to get the opponent rank
final_table <- df_with_opponent_rank %>%
group_by(Pair,Player_name, Player_State, Total_Num_of_Points, Player_PreRating.x) %>%
summarise(Avg_Pre_Chess_Rating_of_Opponents = round(mean(Player_PreRating.y, na.rm = TRUE)))
write.csv(final_table, "tournamentinfo.csv")
knitr::kable(final_table) %>%
kableExtra::kable_styling(font_size = 6)
df_tidy <- df %>%
pivot_longer(
cols = -`adjusted_gross_income`,
names_to = c("Return_Type", "Category", "Metric"),
names_pattern = "^([^_]+)_(.*)_([^_]+)$",
values_to = "Value"
)
library (tidyverse)
library (janitor)
get_data <- read.csv("22.csv", skip = 3)
# Skip the first row to get the header
get_data <- get_data %>% select(-c(22:25))
# Remove duplicate entries
glimpse(get_data)
colnames(get_data) <- c(
"Adjusted.gross.income",
"All_Returns_Count",
"All_Returns_Percent",
"All_Adjusted.gross.income.less.deficit_Amount",
"All_Adjusted.gross.income.less.deficit_Percent",
"All_Average.adjusted.gross.income.less.deficit_Amount",
"Taxable_Returns_Amount",
"Taxable_Returns_Percent",
"Taxable_Adjusted.gross.income.less.deficit_Amount",
"Taxable_Adjusted.gross.income.less.deficit_Percent",
"Taxable_Taxable.Income_Count",
"Taxable_Taxable.Income_Amount",
"Taxable_Taxable.Income_Percent",
"Taxable_Income.tax.after.credits_Count",
"Taxable_Income.tax.after.credits_Amount",
"Taxable_Income.tax.after.credits_Percent",
"Taxable_Total.Income.Tax_Amount",
"Taxable_Total_Percent",
"Taxable_Total_Taxable.income_Percent",
"Taxable_Total_Adjusted.gross.income.less.deficit_Percent",
"Taxable_Average.total.income.tax_Amount"
)
# renamed the columns
df <- get_data[-c(27:198), ]
# removed empty rows
df <- df[-c(1:7), ]
#removed row 1 - 7 (not needed information)
df <- df %>% clean_names()
#clean the column names to make it consistent
glimpse(df)
df_tidy <- df %>%
pivot_longer(
cols = -`adjusted_gross_income`,
names_to = c("Return_Type", "Category", "Metric"),
names_pattern = "^([^_]+)_(.*)_([^_]+)$",
values_to = "Value"
)
knitr::kable(df_tidy) %>%
kableExtra::kable_styling(font_size = 6)
df_filter <- df_tidy %>%
filter(Return_Type == "all", Category == "returns", Metric == "count")
# filtering taxable returns and the percentage for ggplot
df_filter <- df_filter %>%
mutate(adjusted_gross_income = fct_collapse(adjusted_gross_income,
"<25K" = c("No adjusted gross income",
"$1 under $5,000",
"$5,000 under $10,000",
"$10,000 under $15,000",
"$15,000 under $20,000",
"$20,000 under $25,000"),
"25K - <75K" = c("$25,000 under $30,000",
"$30,000 under $40,000",
"$40,000 under $50,000",
"$50,000 under $75,000"),
"75K - <200K" = c("$75,000 under $100,000",
"$100,000 under $200,000"
),
"200K+" = c("$200,000 under $500,000",
"$500,000 under $1,000,000",
"$1,000,000 under $1,500,000",
"$1,500,000 under $2,000,000",
"$2,000,000 under $5,000,000",
"$5,000,000 under $10,000,000",
"$10,000,000 or more")
))
# combine the income levels to smaller groups
df_filter_sum <- df_filter %>%
mutate(Value = gsub(",", "", Value), # Remove commas
Value = as.numeric(Value)) # Convert to numeric
df_filter_sum <- df_filter_sum %>%
group_by(adjusted_gross_income) %>%
summarise(
sum_return_thous = sum(Value)/1e3,
)
df_filter_sum<- df_filter_sum %>%
mutate(adjusted_gross_income =
factor(adjusted_gross_income, levels =
c("<25K",
"25K - <75K",
"75K - <200K",
"200K+")))
ggplot(df_filter_sum, aes(x = adjusted_gross_income, y = sum_return_thous)) +
geom_col(fill = "steelblue") +
labs(title = "Count of Tax Returns Filed by Income Group",
x = "Income Group",
y = "Count (by thousands)")
df_filter_income <- df_tidy %>%
filter(Return_Type == "taxable",
Category %in% c("total_income_tax", "taxable_income"),
Metric %in% c("amount"))
df_filter_income <- df_filter_income %>%
mutate(adjusted_gross_income = fct_collapse(adjusted_gross_income,
"<25K" = c("No adjusted gross income",
"$1 under $5,000",
"$5,000 under $10,000",
"$10,000 under $15,000",
"$15,000 under $20,000",
"$20,000 under $25,000"),
"25K - <75K" = c("$25,000 under $30,000",
"$30,000 under $40,000",
"$40,000 under $50,000",
"$50,000 under $75,000"),
"75K - <200K" = c("$75,000 under $100,000",
"$100,000 under $200,000"
),
"200K+" = c("$200,000 under $500,000",
"$500,000 under $1,000,000",
"$1,000,000 under $1,500,000",
"$1,500,000 under $2,000,000",
"$2,000,000 under $5,000,000",
"$5,000,000 under $10,000,000",
"$10,000,000 or more")
))
# combine the income levels to smaller groups
df_filter_incometax <- df_filter_income %>%
mutate(Value = gsub(",", "", Value),
Value = as.numeric(Value))
df_avg_taxes <- df_filter_incometax %>%
group_by(adjusted_gross_income) %>%
summarise(avg_paid_taxes = sum(Value[Category == "total_income_tax"], na.rm = TRUE) /
sum(Value[Category == "taxable_income"], na.rm = TRUE))
df_avg_taxes<- df_avg_taxes %>%
mutate(adjusted_gross_income = factor(adjusted_gross_income,
levels = c("<25K",
"25K - <75K",
"75K - <200K",
"200K+")))
ggplot(df_avg_taxes, aes(x = adjusted_gross_income, y = avg_paid_taxes)) +
geom_col(fill = "steelblue") +
labs(title = "Effective tax rate by Income Group",
x = "Income Group",
y = "Effective tax rate")
get_data <- read.csv("CUNYMart.csv")
View(get_data)
get_data <- read.csv("CUNYMart.csv", header = TRUE, sep = ",")
get_data <- read.csv("CUNYMart.csv", header = TRUE, sep = ",")
get_data <- read.csv("CUNYMart.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE, check.names = FALSE)
View(get_data)
View(get_data)
data <- read.csv("CUNYMart.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE, check.names = FALSE)
View(data)
data <- read.csv("CUNYMart.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE, check.names = FALSE)
head(get_data)
str(get_data)
data_raw <- readLines("CUNYMart.csv")  # Read file as lines
data_split <- strsplit(data_raw, ",")  # Split by commas
# Convert to data frame
get_data <- do.call(rbind, data_split) |> as.data.frame()
# Assign column names
colnames(get_data) <- get_data[1, ]  # First row as column names
get_data <- get_data[-1, ]  # Remove first row from data
data_raw <- readLines("CUNYMart.csv")  # Read file as lines
data_split <- strsplit(data_raw, ",")  # Split by commas
# Convert to data frame
get_data <- do.call(rbind, data_split) |> as.data.frame()
data_raw <- readLines("CUNYMart.csv")  # Read file as lines
data_split <- strsplit(data_raw, ",")  # Split by commas
View(data_split)
View(data)
get_data <- read.csv("CUNYMart.csv", header = TRUE, sep = ",")
get_data <- read.csv("CUNYMart.csv", header = TRUE, sep = ",")
get_data <- read.csv("CUNYMart.csv", header = TRUE, sep = ",")
library (tidyverse)
library (tableHTML)
library (tidyverse)
library (rvest)
library (tidyverse)
library (xtable)
get_data <- read.csv("CUNYMart.csv", header = TRUE, sep = ",")
print(xtable(get_data), type = "html")
print(xtable(get_data), type = "html")
get_data %>%
kable("html")
data <-xtable(get_data), type = "html"
print(xtable(get_data), type = "html",
html.table.attributes = 'class="styled-table"')
kable(get_data, format = "html")
library (tidyverse)
library(knitr)
get_data <- read.csv("CUNYMart.csv", header = TRUE, sep = ",")
kable(get_data, format = "html")
html <-kable(get_data, format = "html")
writeLines(html, "get_data.html") # Save as an HTML file
# Open the file manually in a browser
browseURL("get_data.html")  # This will open the file in your default browser
html <-kable(get_data, format = "html")
print(html)
writeLines(html, "get_data.html") # Save as an HTML file
# Open the file manually in a browser
browseURL("get_data.html")  # This will open the file in your default browser
html <-kable(get_data, format = "html")
print(html)
writeLines(html, "get_data.html")
#save file
browseURL("get_data.html")
#open in default browser
html <-kable(get_data, format = "html")
print(html)
writeLines(html, "get_data.html")
#save file
browseURL("get_data.html")
#open in default browser
print(sum(get_data$Item.ID))
html <-kable(get_data, format = "html")
print(html)
writeLines(html, "get_data.html")
#save file
browseURL("get_data.html")
#open in default browser
html <-kable(get_data, format = "html")
print(html)
writeLines(html, "get_data.html")
#save file
browseURL("get_data.html")
#open in default browser
library (tidyverse)
library(knitr) #HTML
library(jsonlite) #JSON
get_data <- read.csv("CUNYMart.csv", header = TRUE, sep = ",")
html <-kable(get_data, format = "html")
print(html)
writeLines(html, "get_data.html")
#save file
browseURL("get_data.html")
#open in default browser
json_data <- toJSON(get_data, pretty = TRUE)
write(json_data)
print(json_data) # View JSON
json_data <- toJSON(get_data, pretty = TRUE)
write(json_data)
print(json_data) # View JSON
json_data <- toJSON(get_data, pretty = TRUE)
write(json_data)
print(json_data) # View JSON
xml_data <- as_xml_document(list(
inventory = lapply(1:nrow(get_data), function(i) {
list(
item = list(
Item_ID = inventory_data$Item_ID[i],
Name = inventory_data$Name[i],
Category = inventory_data$Category[i],
Price = inventory_data$Price[i],
Stock_Quantity = inventory_data$Stock_Quantity[i]
)
)
})
))
xml_data <- as_xml_document(list(
inventory = lapply(1:nrow(get_data), function(i) {
list(
item = list(
Category = get_data$Category[i],
Item.Name = get_data$Item.ID[i],
Item.ID = get_data$Item.ID[i],
Brand = get_data$Brand[i],
Price = get_data$Price[i]
Variation.ID = get_data$Variation.ID[i]
xml_data <- as_xml_document(list(
inventory = lapply(1:nrow(get_data), function(i) {
list(
item = list(
Category = get_data$Category[i],
Item.Name = get_data$Item.ID[i],
Item.ID = get_data$Item.ID[i],
Brand = get_data$Brand[i],
Price = get_data$Price[i],
Variation.ID = get_data$Variation.ID[i],
Variation.Details = get_data$Variation.Details[i]
)
)
})
))
library (tidyverse)
library(knitr) #HTML
library(jsonlite) #JSON
library(xml2) #XML
get_data <- read.csv("CUNYMart.csv", header = TRUE, sep = ",")
html <-kable(get_data, format = "html")
print(html)
writeLines(html, "get_data.html")
#save file
browseURL("get_data.html")
#open in default browser
json_data <- toJSON(get_data, pretty = TRUE)
write(json_data)
print(json_data) # View JSON
xml_data <- as_xml_document(list(
inventory = lapply(1:nrow(get_data), function(i) {
list(
item = list(
Category = get_data$Category[i],
Item.Name = get_data$Item.ID[i],
Item.ID = get_data$Item.ID[i],
Brand = get_data$Brand[i],
Price = get_data$Price[i],
Variation.ID = get_data$Variation.ID[i],
Variation.Details = get_data$Variation.Details[i]
)
)
})
))
xml_data <- as_xml_document(list(
inventory = lapply(1:nrow(get_data), function(i) {
list(
item = list(
Category = get_data$Category[i],
Item.Name = get_data$Item.ID[i],
Item.ID = get_data$Item.ID[i],
Brand = get_data$Brand[i],
Price = get_data$Price[i],
Variation.ID = get_data$Variation.ID[i],
Variation.Details = get_data$Variation.Details[i]
)
)
})
))
print(xml_data)
json_data <- toJSON(get_data, pretty = TRUE)
write_json(get_data, "get_data.json")
print(json_data) # View JSON
xml_data <- as_xml_document(list(
inventory = lapply(1:nrow(get_data), function(i) {
list(
item = list(
Category = get_data$Category[i],
Item.Name = get_data$Item.ID[i],
Item.ID = get_data$Item.ID[i],
Brand = get_data$Brand[i],
Price = get_data$Price[i],
Variation.ID = get_data$Variation.ID[i],
Variation.Details = get_data$Variation.Details[i]
)
)
})
))
write_xml(xml_data, "get_data.xml")
xml_data <- as_xml_document(list(
inventory = lapply(1:nrow(get_data), function(i) {
list(
item = list(
Category = get_data$Category[i],
Item.Name = get_data$Item.ID[i],
Item.ID = get_data$Item.ID[i],
Brand = get_data$Brand[i],
Price = get_data$Price[i],
Variation.ID = get_data$Variation.ID[i],
Variation.Details = get_data$Variation.Details[i]
)
)
})
))
write_xml(xml_data, "get_data.xml")
print(xml_data)
xml_data <- as_xml_document(list(
inventory = lapply(1:nrow(get_data), function(i) {
list(
item = list(
Category = get_data$Category[i],
Item.Name = get_data$Item.ID[i],
Item.ID = get_data$Item.ID[i],
Brand = get_data$Brand[i],
Price = get_data$Price[i],
Variation.ID = get_data$Variation.ID[i],
Variation.Details = get_data$Variation.Details[i]
)
)
})
))
write_xml(xml_data, "get_data.xml")
print(xml_data)
