xml_raw <- readLines("get_data.xml")
print(xml_raw)
xml_data <- read_xml("get_data.xml")
# Extract all <item> elements
xml_items <- xml_data %>% xml_find_all("//item")
# Convert to data frame
xml_df <- tibble(
Category = xml_items %>% xml_find_first("Category") %>% xml_text(),
Item_Name = xml_items %>% xml_find_first("Item_Name") %>% xml_text(),
Item_ID = xml_items %>% xml_find_first("Item_ID") %>% xml_text() %>% as.integer(),
Brand = xml_items %>% xml_find_first("Brand") %>% xml_text(),
Price = xml_items %>% xml_find_first("Price") %>% xml_text() %>% as.numeric(),
Variation_ID = xml_items %>% xml_find_first("Variation_ID") %>% xml_text(),
Variation_Details = xml_items %>% xml_find_first("Variation_Details") %>% xml_text()
)
xml_data <- read_xml("get_data.xml")
# Extract all <item> elements
xml_items <- xml_data %>% xml_find_all("//item")
# Convert to data frame
xml_df <- tibble(
Category = xml_items %>% xml_find_first("Category") %>% xml_text(),
Item_Name = xml_items %>% xml_find_first("Item_Name") %>% xml_text(),
Item_ID = xml_items %>% xml_find_first("Item_ID") %>% xml_text() %>% as.integer(),
Brand = xml_items %>% xml_find_first("Brand") %>% xml_text(),
Price = xml_items %>% xml_find_first("Price") %>% xml_text() %>% as.numeric(),
Variation_ID = xml_items %>% xml_find_first("Variation_ID") %>% xml_text(),
Variation_Details = xml_items %>% xml_find_first("Variation_Details") %>% xml_text()
)
print(xml_df)
xml_data <- read_xml("get_data.xml")
print(xml_data)
# Extract all <item> elements
xml_items <- xml_data %>% xml_find_all("//item")
# Convert to data frame
xml_df <- tibble(
Category = xml_items %>% xml_find_first("Category") %>% xml_text(),
Item_Name = xml_items %>% xml_find_first("Item_Name") %>% xml_text(),
Item_ID = xml_items %>% xml_find_first("Item_ID") %>% xml_text() %>% as.integer(),
Brand = xml_items %>% xml_find_first("Brand") %>% xml_text(),
Price = xml_items %>% xml_find_first("Price") %>% xml_text() %>% as.numeric(),
Variation_ID = xml_items %>% xml_find_first("Variation_ID") %>% xml_text(),
Variation_Details = xml_items %>% xml_find_first("Variation_Details") %>% xml_text()
)
print(xml_df)
View(xml_parsed)
View(xml_items)
View(xml_doc)
View(xml_df)
View(xml_data)
xml_doc <- xml_new_root("inventory")
for (i in 1:nrow(get_data)) {
item <- xml_add_child(xml_doc, "item")
xml_add_child(item, "Category", data$Category[i])
xml_add_child(item, "Item.Name", data$Item_Name[i])
xml_add_child(item, "Item.ID", data$Item_ID[i])
xml_add_child(item, "Brand", data$Brand[i])
xml_add_child(item, "Price", data$Price[i])
xml_add_child(item, "Variation.ID", data$Variation_ID[i])
xml_add_child(item, "Variation.Details", data$Variation_Details[i])
}
write_xml(xml_data, "get_data.xml")
print(xml_data)
View(get_data)
xml_doc <- xml_new_root("inventory")
for (i in 1:nrow(get_data)) {
item <- xml_add_child(xml_doc, "item")
xml_add_child(item, "Category", get_data$Category[i])
xml_add_child(item, "Item.Name", get_data$Item_Name[i])
xml_add_child(item, "Item.ID", get_data$Item_ID[i])
xml_add_child(item, "Brand", get_data$Brand[i])
xml_add_child(item, "Price", get_data$Price[i])
xml_add_child(item, "Variation.ID", get_data$Variation_ID[i])
xml_add_child(item, "Variation.Details", get_data$Variation_Details[i])
}
write_xml(xml_data, "get_data.xml")
print(xml_data)
xml_doc <- xml_new_root("inventory")
for (i in 1:nrow(get_data)) {
item <- xml_add_child(xml_doc, "item")
xml_add_child(item, "Category", get_data$Category[i])
xml_add_child(item, "Item.Name", get_data$Item_Name[i])
xml_add_child(item, "Item.ID", get_data$Item_ID[i])
xml_add_child(item, "Brand", get_data$Brand[i])
xml_add_child(item, "Price", get_data$Price[i])
xml_add_child(item, "Variation.ID", get_data$Variation_ID[i])
xml_add_child(item, "Variation.Details", get_data$Variation_Details[i])
}
write_xml(xml_data, "get_data.xml")
print(xml_data)
xml_doc <- xml_new_root("inventory")
for (i in 1:nrow(get_data)) {
item <- xml_add_child(xml_doc, "item")
xml_add_child(item, "Category", get_data$Category[i])
xml_add_child(item, "Item.Name", get_data$Item_Name[i])
xml_add_child(item, "Item.ID", get_data$Item_ID[i])
xml_add_child(item, "Brand", get_data$Brand[i])
xml_add_child(item, "Price", get_data$Price[i])
xml_add_child(item, "Variation.ID", get_data$Variation_ID[i])
xml_add_child(item, "Variation.Details", get_data$Variation_Details[i])
}
write_xml(xml_data, "get_data.xml")
print(xml_data)
xml_doc <- xml_new_root("inventory")
for (i in 1:nrow(get_data)) {
item <- xml_add_child(xml_doc, "item")
xml_add_child(item, "Category", get_data$Category[i])
xml_add_child(item, "Item.Name", get_data$Item.Name[i])
xml_add_child(item, "Item.ID", get_data$Item.ID[i])
xml_add_child(item, "Brand", get_data$Brand[i])
xml_add_child(item, "Price", get_data$Price[i])
xml_add_child(item, "Variation.ID", get_data$Variation.ID[i])
xml_add_child(item, "Variation.Details", get_data$Variation.Details[i])
}
write_xml(xml_data, "get_data.xml")
print(xml_data)
xml_doc <- xml_new_root("inventory")
for (i in 1:nrow(get_data)) {
item <- xml_add_child(xml_doc, "item")
xml_add_child(item, "Category", get_data$Category[i])
xml_add_child(item, "Item.Name", get_data$Item.Name[i])
xml_add_child(item, "Item.ID", get_data$Item.ID[i])
xml_add_child(item, "Brand", get_data$Brand[i])
xml_add_child(item, "Price", get_data$Price[i])
xml_add_child(item, "Variation.ID", get_data$Variation.ID[i])
xml_add_child(item, "Variation.Details", get_data$Variation.Details[i])
}
write_xml(xml_data, "get_data.xml")
print(xml_data)
xml_doc <- xml_new_root("inventory")
for (i in 1:nrow(get_data)) {
item <- xml_add_child(xml_doc, "item")
xml_add_child(item, "Category", get_data$Category[i])
xml_add_child(item, "Item.Name", get_data$Item.Name[i])
xml_add_child(item, "Item.ID", get_data$Item.ID[i])
xml_add_child(item, "Brand", get_data$Brand[i])
xml_add_child(item, "Price", get_data$Price[i])
xml_add_child(item, "Variation.ID", get_data$Variation.ID[i])
xml_add_child(item, "Variation.Details", get_data$Variation.Details[i])
}
write_xml(xml_doc, "get_data.xml")
print(xml_doc)
xml_data <- read_xml("get_data.xml")
print(xml_data)
# Extract all <item> elements
xml_items <- xml_data %>% xml_find_all("//item")
# Convert to data frame
xml_df <- tibble(
Category = xml_items %>% xml_find_first("Category") %>% xml_text(),
Item_Name = xml_items %>% xml_find_first("Item_Name") %>% xml_text(),
Item_ID = xml_items %>% xml_find_first("Item_ID") %>% xml_text() %>% as.integer(),
Brand = xml_items %>% xml_find_first("Brand") %>% xml_text(),
Price = xml_items %>% xml_find_first("Price") %>% xml_text() %>% as.numeric(),
Variation_ID = xml_items %>% xml_find_first("Variation_ID") %>% xml_text(),
Variation_Details = xml_items %>% xml_find_first("Variation_Details") %>% xml_text()
)
print(xml_df)
xml_data <- read_xml("get_data.xml")
print(xml_data)
# Extract all <item> elements
xml_items <- xml_data %>% xml_find_all("//item")
# Convert to data frame
xml_df <- tibble(
Category = xml_items %>% xml_find_first("Category") %>% xml_text(),
Item_Name = xml_items %>% xml_find_first("Item.Name") %>% xml_text(),
Item_ID = xml_items %>% xml_find_first("Item.ID") %>% xml_text() %>% as.integer(),
Brand = xml_items %>% xml_find_first("Brand") %>% xml_text(),
Price = xml_items %>% xml_find_first("Price") %>% xml_text() %>% as.numeric(),
Variation_ID = xml_items %>% xml_find_first("Variation.ID") %>% xml_text(),
Variation_Details = xml_items %>% xml_find_first("Variation.Details") %>% xml_text()
)
print(xml_df)
xml_data <- read_xml("get_data.xml")
print(xml_data)
# Extract all <item> elements
xml_items <- xml_data %>% xml_find_all("//item")
# Convert to data frame
xml_df <- tibble(
Category = xml_items %>% xml_find_first("Category") %>% xml_text(),
Item_Name = xml_items %>% xml_find_first("Item.Name") %>% xml_text(),
Item_ID = xml_items %>% xml_find_first("Item.ID") %>% xml_text() %>% as.integer(),
Brand = xml_items %>% xml_find_first("Brand") %>% xml_text(),
Price = xml_items %>% xml_find_first("Price") %>% xml_text() %>% as.numeric(),
Variation_ID = xml_items %>% xml_find_first("Variation.ID") %>% xml_text(),
Variation_Details = xml_items %>% xml_find_first("Variation.Details") %>% xml_text()
)
top_ten_expensive <- xml_df %>%
arrange(desc(Price)) %>%
select(Item.Name, Price, Category) %>%
head(10)
xml_data <- read_xml("get_data.xml")
print(xml_data)
# Extract all <item> elements
xml_items <- xml_data %>% xml_find_all("//item")
# Convert to data frame
xml_df <- tibble(
Category = xml_items %>% xml_find_first("Category") %>% xml_text(),
Item_Name = xml_items %>% xml_find_first("Item.Name") %>% xml_text(),
Item_ID = xml_items %>% xml_find_first("Item.ID") %>% xml_text() %>% as.integer(),
Brand = xml_items %>% xml_find_first("Brand") %>% xml_text(),
Price = xml_items %>% xml_find_first("Price") %>% xml_text() %>% as.numeric(),
Variation_ID = xml_items %>% xml_find_first("Variation.ID") %>% xml_text(),
Variation_Details = xml_items %>% xml_find_first("Variation.Details") %>% xml_text()
)
top_ten_expensive <- xml_df %>%
arrange(desc(Price)) %>%
select(Item_Name, Price, Category) %>%
head(10)
print(top_ten_expensive)
install.packages("arrow")
library (tidyverse)
library(knitr) #HTML
library(jsonlite) #JSON
library(xml2) #XML
library(arrow) #Parquet
library(rvest)
html_data <- readLines("get_data.html")
html_table <- html_data %>%
html_table(fill = TRUE) %>%
.[[1]]  # Extract the first table
html_data <- readLines("get_data.html")
html_table <- html_data %>%
html_table(fill = TRUE) %>%
.[[1]]  # Extract the first table
install.packages("arrow")
library (tidyverse)
library(knitr) #HTML
install.packages("arrow")
library (tidyverse)
library(knitr) #HTML
library(jsonlite) #JSON
library(xml2) #XML
library(arrow) #Parquet
library(rvest)
get_data <- read.csv("CUNYMart.csv", header = TRUE, sep = ",")
html <-kable(get_data, format = "html")
print(html)
writeLines(html, "get_data.html")
#save file
browseURL("get_data.html")
#open in default browser
json_data <- toJSON(get_data, pretty = TRUE)
write_json(get_data, "get_data.json")
print(json_data) # View JSON
xml_doc <- xml_new_root("inventory")
for (i in 1:nrow(get_data)) {
item <- xml_add_child(xml_doc, "item")
xml_add_child(item, "Category", get_data$Category[i])
xml_add_child(item, "Item.Name", get_data$Item.Name[i])
xml_add_child(item, "Item.ID", get_data$Item.ID[i])
xml_add_child(item, "Brand", get_data$Brand[i])
xml_add_child(item, "Price", get_data$Price[i])
xml_add_child(item, "Variation.ID", get_data$Variation.ID[i])
xml_add_child(item, "Variation.Details", get_data$Variation.Details[i])
}
write_xml(xml_doc, "get_data.xml")
print(xml_doc)
par <- write_parquet(get_data, "get_data.parquet")
print(par)
json_data <- fromJSON("get_data.json")
top_ten_expensive <- json_data %>%
arrange(desc(Price)) %>%
select(Item.Name, Price, Category, Variation.Details) %>%
head(10)
print(top_ten_expensive)
xml_data <- read_xml("get_data.xml")
print(xml_data)
# Extract all <item> elements
xml_items <- xml_data %>% xml_find_all("//item")
# Convert to data frame
xml_df <- tibble(
Category = xml_items %>% xml_find_first("Category") %>% xml_text(),
Item_Name = xml_items %>% xml_find_first("Item.Name") %>% xml_text(),
Item_ID = xml_items %>% xml_find_first("Item.ID") %>% xml_text() %>% as.integer(),
Brand = xml_items %>% xml_find_first("Brand") %>% xml_text(),
Price = xml_items %>% xml_find_first("Price") %>% xml_text() %>% as.numeric(),
Variation_ID = xml_items %>% xml_find_first("Variation.ID") %>% xml_text(),
Variation_Details = xml_items %>% xml_find_first("Variation.Details") %>% xml_text()
)
top_ten_expensive <- xml_df %>%
arrange(desc(Price)) %>%
select(Item_Name, Price, Category) %>%
head(10)
print(top_ten_expensive)
html_data <- readLines("get_data.html")
html_table <- html_data %>%
html_table(fill = TRUE) %>%
.[[1]]  # Extract the first table
html <-kable(get_data, format = "html")
print(html)
writeLines(html, "get_data.html")
#save file
html_data <- readLines("get_data.html")
html_table <- html_data %>%
html_table(fill = TRUE) %>%
.[[1]]  # Extract the first table
html_data <- readLines("get_data.html")
html_data <- readLines("get_data.html")
print(html)
html_data <- readLines("get_data.html")
print(html_data)
html_data <- readLines("get_data.html")
html_table <- html_data %>%
html_table(fill = TRUE) %>%
.[[1]]  # Extract the first table
html_data <- read_html("get_data.html")
# Print the first 500 characters to inspect the file
print(substr(as.character(html_data), 1, 500))
html_data <- read_html("get_data.html")
# Print the first 500 characters to inspect the file
print(substr(as.character(html_data), 1, 500))
tables <- html_data %>% html_elements("table")
# Print the number of tables found
length(tables)
html_data <- read_html("get_data.html")
# Print the first 500 characters to inspect the file
print(substr(as.character(html_data), 1, 500))
tables <- html_data %>% html_elements("table")
# Print the number of tables found
length(tables)
html_data <- read_html("get_data.html")
# Print the first 500 characters to inspect the file
print(substr(as.character(html_data), 1, 500))
tables <- html_data %>% html_elements("table")
# Print the number of tables found
length(tables)
html_table <- html_data %>%
html_element("table") %>%  # Get the first table
html_table(fill = TRUE)    # Convert it to a data frame
# View the extracted table
print(html_table)
html_data <- read_html("get_data.html")
html_table <- html_data %>%
html_element("table") %>%  # Get the first table
html_table(fill = TRUE)    # Convert it to a data frame
# View the extracted table
print(html_table)
html_data <- read_html("get_data.html")
html_table <- html_data %>%
html_element("table") %>%  # Get the first table
html_table(fill = TRUE)    # Convert it to a data frame
# View the extracted table
print(html_table)
html_data <- read_html("get_data.html")
html_table <- html_data %>%
html_element("table") %>%  # Get the first table
html_table(fill = TRUE)    # Convert it to a data frame
# View the extracted table
print(html_table)
category_sales <- html_table %>%
group_by(Category) %>%
summarise(Total_Revenue = sum(Price, na.rm = TRUE)) %>%
arrange(desc(Total_Revenue))
print(category_sales)
html_data <- read_html("get_data.html")
html_table <- html_data %>%
html_element("table") %>%  # Get the first table
html_table(fill = TRUE)    # Convert it to a data frame
# View the extracted table
print(html_table)
top_ten_expensive_html <- html_table %>%
arrange(desc(Price)) %>%
select(Item_Name, Price, Category) %>%
head(10)
html_data <- read_html("get_data.html")
html_table <- html_data %>%
html_element("table") %>%  # Get the first table
html_table(fill = TRUE)    # Convert it to a data frame
# View the extracted table
print(html_table)
top_ten_expensive_html <- html_table %>%
arrange(desc(Price)) %>%
select(Item.Name, Price, Category) %>%
head(10)
print(top_ten_expensive_html)
parquet_data <- read_parquet("get_data.parquet")
top_ten_expensive_parquet <- parquet_data %>%
arrange(desc(Price)) %>%
select(Item.Name, Price, Category) %>%
head(10)
print(top_ten_expensive_parquet)
json_data <- fromJSON("get_data.json")
install.packages("arrow")
library (tidyverse)
install.packages("DiagrammeR")
grViz("
digraph ER {
graph [layout = dot, rankdir = LR]
node [shape = rectangle, style = filled, fillcolor = lightblue]
Skills [label = 'Skills | Skill_ID PK | Skill_Name | Category']
Job_Postings [label = 'Job_Postings | Job_ID PK | Title | Salary | Company_ID FK | Location_ID FK']
Company [label = 'Company | Company_ID PK | Company_Name | Industry_ID FK']
Industry [label = 'Industry | Industry_ID PK | Industry_Name']
Location [label = 'Location | Location_ID PK | City | State | Country']
Tools [label = 'Tools | Tool_ID PK | Tool_Name']
Job_Skills [label = 'Job_Skills | Job_ID FK | Skill_ID FK']
Job_Tools [label = 'Job_Tools | Job_ID FK | Tool_ID FK']
# Relationships
Job_Postings -> Company [label = 'Company_ID']
Job_Postings -> Location [label = 'Location_ID']
Company -> Industry [label = 'Industry_ID']
Job_Skills -> Job_Postings [label = 'Job_ID']
Job_Skills -> Skills [label = 'Skill_ID']
Job_Tools -> Job_Postings [label = 'Job_ID']
Job_Tools -> Tools [label = 'Tool_ID']
}
")
grViz("
digraph ER {
graph [layout = dot, rankdir = LR]
node [shape = rectangle, style = filled, fillcolor = lightblue]
Skills [label = 'Skills | Skill_ID PK | Skill_Name | Category']
Job_Postings [label = 'Job_Postings | Job_ID PK | Title | Salary | Company_ID FK | Location_ID FK']
Company [label = 'Company | Company_ID PK | Company_Name | Industry_ID FK']
Industry [label = 'Industry | Industry_ID PK | Industry_Name']
Location [label = 'Location | Location_ID PK | City | State | Country']
Tools [label = 'Tools | Tool_ID PK | Tool_Name']
Job_Skills [label = 'Job_Skills | Job_ID FK | Skill_ID FK']
Job_Tools [label = 'Job_Tools | Job_ID FK | Tool_ID FK']
# Relationships
Job_Postings -> Company [label = 'Company_ID']
Job_Postings -> Location [label = 'Location_ID']
Company -> Industry [label = 'Industry_ID']
Job_Skills -> Job_Postings [label = 'Job_ID']
Job_Skills -> Skills [label = 'Skill_ID']
Job_Tools -> Job_Postings [label = 'Job_ID']
Job_Tools -> Tools [label = 'Tool_ID']
}
")
grViz("
digraph ER {
graph [layout = dot, rankdir = LR]
node [shape = rectangle, style = filled, fillcolor = lightblue]
Skills [label = 'Skills | Skill_ID PK | Skill_Name | Category']
Job_Postings [label = 'Job_Postings | Job_ID PK | Title | Salary | Company_ID FK | Location_ID FK']
Company [label = 'Company | Company_ID PK | Company_Name | Industry_ID FK']
Industry [label = 'Industry | Industry_ID PK | Industry_Name']
Location [label = 'Location | Location_ID PK | City | State | Country']
Tools [label = 'Tools | Tool_ID PK | Tool_Name']
Job_Skills [label = 'Job_Skills | Job_ID FK | Skill_ID FK']
Job_Tools [label = 'Job_Tools | Job_ID FK | Tool_ID FK']
# Relationships
Job_Postings -> Company [label = 'Company_ID']
Job_Postings -> Location [label = 'Location_ID']
Company -> Industry [label = 'Industry_ID']
Job_Skills -> Job_Postings [label = 'Job_ID']
Job_Skills -> Skills [label = 'Skill_ID']
Job_Tools -> Job_Postings [label = 'Job_ID']
Job_Tools -> Tools [label = 'Tool_ID']
}
")
install.packages("DiagrammeR")  # Install DiagrammeR package
library(DiagrammeR)  # Load the package
grViz("
digraph ER {
graph [layout = dot, rankdir = LR]
node [shape = rectangle, style = filled, fillcolor = lightblue]
Skills [label = 'Skills | Skill_ID PK | Skill_Name | Category']
Job_Postings [label = 'Job_Postings | Job_ID PK | Title | Salary | Company_ID FK | Location_ID FK']
Company [label = 'Company | Company_ID PK | Company_Name | Industry_ID FK']
Industry [label = 'Industry | Industry_ID PK | Industry_Name']
Location [label = 'Location | Location_ID PK | City | State | Country']
Tools [label = 'Tools | Tool_ID PK | Tool_Name']
Job_Skills [label = 'Job_Skills | Job_ID FK | Skill_ID FK']
Job_Tools [label = 'Job_Tools | Job_ID FK | Tool_ID FK']
# Relationships
Job_Postings -> Company [label = 'Company_ID']
Job_Postings -> Location [label = 'Location_ID']
Company -> Industry [label = 'Industry_ID']
Job_Skills -> Job_Postings [label = 'Job_ID']
Job_Skills -> Skills [label = 'Skill_ID']
Job_Tools -> Job_Postings [label = 'Job_ID']
Job_Tools -> Tools [label = 'Tool_ID']
}
")
knitr::opts_chunk$set(echo = TRUE)
install.packages("DiagrammeR")  # Install DiagrammeR package
library(DiagrammeR)  # Load the package
install.packages("DiagrammeR")
knitr::opts_chunk$set(echo = TRUE)
exists("grViz", where = asNamespace("DiagrammeR"), inherits = FALSE)
install.packages("htmlwidgets")
install.packages("DiagrammeRsvg")
knitr::opts_chunk$set(echo = TRUE)
install.packages("DiagrammeR")  # Install DiagrammeR package
knitr::opts_chunk$set(echo = TRUE)
library(DiagrammeR)
knitr::opts_chunk$set(echo = TRUE)
library(DiagrammeR)
install.packages("htmlwidgets")
knitr::opts_chunk$set(echo = TRUE)
library(DiagrammeR)
grViz("
digraph ER {
graph [layout = dot, rankdir = LR]
node [shape = rectangle, style = filled, fillcolor = lightblue]
Skills [label = 'Skills | Skill_ID PK | Skill_Name | Category']
Job_Postings [label = 'Job_Postings | Job_ID PK | Title | Salary | Company_ID FK | Location_ID FK']
Company [label = 'Company | Company_ID PK | Company_Name | Industry_ID FK']
Industry [label = 'Industry | Industry_ID PK | Industry_Name']
Location [label = 'Location | Location_ID PK | City | State | Country']
Tools [label = 'Tools | Tool_ID PK | Tool_Name']
Job_Skills [label = 'Job_Skills | Job_ID FK | Skill_ID FK']
Job_Tools [label = 'Job_Tools | Job_ID FK | Tool_ID FK']
Job_Postings -> Company [label = 'Company_ID']
Job_Postings -> Location [label = 'Location_ID']
Company -> Industry [label = 'Industry_ID']
Job_Skills -> Job_Postings [label = 'Job_ID']
Job_Skills -> Skills [label = 'Skill_ID']
Job_Tools -> Job_Postings [label = 'Job_ID']
Job_Tools -> Tools [label = 'Tool_ID']
}
")
